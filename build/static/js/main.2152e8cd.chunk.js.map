{"version":3,"sources":["components/SearchForm.js","components/Photo.js","components/NotFound.js","components/PhotoContainer.js","components/Nav.js","components/DoesNotExist.js","components/config.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchForm","handleSubmit","e","preventDefault","setHistory","props","onSearch","query","value","loading","currentTarget","reset","topic","path","history","push","componentDidUpdate","urlParam","match","params","className","onSubmit","this","type","name","placeholder","ref","input","fill","height","viewBox","width","xmlns","d","Component","withRouter","Photo","url","farm","server","id","secret","src","alt","NotFound","PhotoContainer","gifs","results","length","map","gif","parseInt","key","to","DoesNotExist","frameBorder","allowFullScreen","title","href","apiKey","App","state","performSearch","axios","get","then","response","setState","data","photos","photo","location","pathname","catch","error","console","log","setLoading","exact","component","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2152e8cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {withRouter} from 'react-router';\n\nclass SearchForm extends Component {\n    \n    /**\n     *  @param {event} e Event handler.\n     */\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.setHistory();\n        this.props.onSearch(this.query.value);\n        this.props.loading();\n        e.currentTarget.reset();\n      }\n\n    /**\n     *  @param {string} query Search query in App Component,\n     *  set path and push history.\n     */\n    setHistory =() =>{ \n        let topic= this.query.value;\n        let path = `/search/${topic}`;\n        this.props.history.push(path);   \n    }\n\n    /**\n     *  @param {string} query Compare URL param to Search\n     *  query and if not equivalent, perform new search based\n     *  on URL param. \n     */\n    componentDidUpdate=()=>{\n        const urlParam= this.props.match.params.query;\n        const propQuery= this.props.query;\n        if(urlParam !== propQuery){\n            this.props.onSearch(urlParam)    \n        } \n    }\n         \n    render () {    \n    return (  \n        <form className=\"search-form\" onSubmit={this.handleSubmit}>\n            <input \n            type=\"search\" \n            name=\"search\" \n            placeholder=\"Search\" \n            ref={input => this.query = input}\n            />\n            <button type=\"submit\" className=\"search-button\">\n            <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            </svg>\n            </button>\n        </form>\n    );\n    }\n}\n\n\nexport default withRouter(SearchForm);","import React from 'react';\n\n\nconst Photo = props => {\n   \n    const url = `https://farm${props.farm}.staticflickr.com/${props.server}/${props.id}_${props.secret}.jpg`\n\n    return(\n        \n        <li>\n            <img src={url} alt=''/>\n        </li>\n    )\n};\n    \nexport default Photo;","import React from 'react';\n\nconst NotFound = () => (\n\n    <ul>\n        <li className=\"not-found\">\n            <h3>No Results Found</h3>\n            <p>Your search did not return any results. Please try again.</p>\n        </li>\n    </ul>\n\n);\n\n\nexport default NotFound;","import React, {Component} from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\n\n\nclass PhotoContainer extends Component {\n  \n    render(){\n    \n        const results = this.props.gifs;\n        let gifs;\n        if (results.length > 0){\n                    gifs = results.map(gif => \n                        <Photo \n                        farm={gif.farm} \n                        server={parseInt(gif.server)} \n                        id={parseInt(gif.id)} \n                        secret={gif.secret}\n                        key={parseInt(gif.id)}\n                        />\n                        );\n                }\n        else if(results.length === 0){\n            return (\n                <NotFound />\n            )\n            } \n\n    return (\n        <div className=\"photo-container\">\n            <h2>{this.props.query} Gifs</h2>\n                <ul>\n                    {gifs } \n                </ul>\n        </div>\n    );\n    }\n}\n\nexport default PhotoContainer;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport {withRouter} from 'react-router';\n\n\nconst Nav = () => {\n\n    return(\n      <div>\n          <nav className=\"main-nav\">\n            <ul>\n              <li><NavLink to=\"/water\" query=\"water\">Water</NavLink></li>\n              <li><NavLink to=\"/horse\" query=\"horses\">Horse</NavLink></li>\n              <li><NavLink to=\"/forest\">Forest</NavLink></li>\n            </ul>\n          </nav>\n        </div>   \n    );\n}\n\nexport default withRouter(Nav);","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nconst DoesNotExist = ()=> {\n\n    return(\n    <div>\n        <Link to=\"/\">\n            <button type=\"button\" className=\"button\">\n                <h3><em><strong>Take me home!</strong></em></h3>\n            </button>\n        </Link>\n        <br />\n        <h1>Uh oh!, looks like the page you're looking for does not exist.</h1>\n        <iframe src=\"https://giphy.com/embed/11JTxkrmq4bGE0\" width=\"480\" height=\"369\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen title=\"Lost Cat\"></iframe>\n        <p><a href=\"https://giphy.com/gifs/cat-computer-working-11JTxkrmq4bGE0\">via GIPHY</a></p>\n        \n    </div>  \n    ) \n}\n\nexport default DoesNotExist;","const apiKey = '676f9bd5f74909b4b41357de47d4330e';\nexport default apiKey;","import React, { Component } from 'react';\nimport { Switch, Route} from 'react-router-dom';\nimport { withRouter } from \"react-router\";\n\n//App Components\nimport SearchForm from './SearchForm';\nimport PhotoContainer from './PhotoContainer';\nimport Nav from './Nav';\nimport DoesNotExist from './DoesNotExist';\n\n//Search features\nimport axios from 'axios';\nimport apiKey from './config';\n\n class App extends Component {\n\n    state={\n      query: '',\n      gifs: [],\n      loading: true,\n      url: '/'\n    }\n\n    componentDidMount(){\n        this.performSearch();    \n    }\n\n    /**\n     *  @param {string} query Search topic.\n     */\n    performSearch=(query='dingo')=>{\n        axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n          .then(response => {\n            this.setState({\n                query: query,\n                gifs: response.data.photos.photo,\n                loading: false,\n                url: this.props.location.pathname\n            });\n          })\n          .catch(error => {\n            console.log('Error fetching and parsing results', error);\n          });\n          \n    }\n\n    setLoading=()=>{\n      this.setState({\n        loading: true\n      })\n    }\n\n    render(){\n    return (\n      <div className=\"container\">\n      <Switch>\n\n          <Route exact path=\"/\">\n            <SearchForm onSearch={this.performSearch} query={this.state.query} loading={this.setLoading}/>\n            <Nav />\n            {\n              (this.state.loading)\n              ? <p>Loading...</p>\n              : <PhotoContainer gifs={this.state.gifs} query={this.state.query}/>\n            } \n          </Route>\n        \n          <Route exact path=\"/search/:query\" >\n            <SearchForm onSearch={this.performSearch} query={this.state.query} loading={this.setLoading}/>\n            <Nav />\n            {\n              (this.state.loading)\n              ? <p>Loading...</p>\n              : <PhotoContainer gifs={this.state.gifs} query={this.state.query}/>\n            } \n          </Route>\n          \n          <Route exact path=\"/:query\" >\n            <SearchForm onSearch={this.performSearch} query={this.state.query} loading={this.setLoading}/>\n            <Nav />\n            {\n              (this.state.loading)\n              ? <p>Loading...</p>\n              : <PhotoContainer gifs={this.state.gifs} query={this.state.query}/>\n            } \n          </Route>\n \n          <Route component={DoesNotExist}/>\n         \n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>, document.getElementById('root')\n    )\n   \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}